[gcode_macro M73]
rename_existing: M73.1
gcode:
  {% set progress = params.P | default(0) | int %}

  SET_GCODE_VARIABLE MACRO=DIM_LED_BAR VARIABLE=progress VALUE={progress}

  {% if progress == 100 %}
    {% set progress = 0 %} # Reset progress after end. PrusaSlicer adding M73 P100 after finish G-Code
  {% endif %}

  SET_LED_BAR_PROGRESS LED=led_bar PROGRESS={progress}
  SET_KNOB_PROGRESS LED=fysetc_mini12864 PROGRESS={progress}

  M73.1 P{progress}

[gcode_macro SET_LED_BAR_PROGRESS]
variable_brightness: 1
gcode:
  {% set progress = params.PROGRESS | default(0) | int %}
  {% set led = params.LED | default("led_bar") %}
  {% set count = printer.configfile.settings["neopixel %s" % params.LED].chain_count %}
  {% set green_leds = (progress / 100 * count) | round | int %}
  {% set brightness = brightness | float %}

  {% for i in range(count) %}
    {% if green_leds > i %}
      SET_LED LED={led} RED={0.1 * brightness} GREEN={0.1 * brightness} BLUE={0.1 * brightness} INDEX={i + 1} {% if i < count - 1 %}TRANSMIT=0{% endif %}
    {% else %}
      SET_LED LED={led} RED={0.0 * brightness} GREEN={0.0 * brightness} BLUE={0.0 * brightness} INDEX={i + 1} {% if i < count - 1 %}TRANSMIT=0{% endif %}
    {% endif %}
  {% endfor %}

[gcode_macro RESET_PROGRESS]
variable_brightness: 1
gcode:
  {% set led_bar_settings = printer.configfile.settings["neopixel led_bar"] %}
  {% set fysetc_mini12864_settings = printer.configfile.settings["neopixel fysetc_mini12864"] %}

  SET_LED LED=led_bar RED={led_bar_settings.initial_red * brightness} GREEN={led_bar_settings.initial_green * brightness} BLUE={led_bar_settings.initial_blue * brightness}
  SET_LED LED=fysetc_mini12864 RED={fysetc_mini12864_settings.initial_red} GREEN={fysetc_mini12864_settings.initial_green} BLUE={fysetc_mini12864_settings.initial_blue}

[gcode_macro SET_KNOB_PROGRESS]
gcode:
  {% set progress = params.PROGRESS | default(0) | int %}
  {% set led = params.LED | default("led_bar") %}

  {% if progress < 40 %}
    SET_KNOB_COLOR LED={led} RED=0.8 GREEN=0 BLUE=0
  {% elif progress < 70 %}
    SET_KNOB_COLOR LED={led} RED=0.8 GREEN=0.8 BLUE=0
  {% else %}
    SET_KNOB_COLOR LED={led} RED=0 GREEN=0.8 BLUE=0
  {% endif %}

[gcode_macro SET_KNOB_COLOR]
gcode:
  SET_LED LED={params.LED} RED={params.RED} GREEN={params.GREEN} BLUE={params.BLUE} INDEX=2 TRANSMIT=0
  SET_LED LED={params.LED} RED={params.RED} GREEN={params.GREEN} BLUE={params.BLUE} INDEX=3

[gcode_macro DIM_LED_BAR]
variable_progress: 0
gcode:
  {% set led = params.LED | default("led_bar") %}

  {% set led_bar_settings = printer.configfile.settings["neopixel %s" % led] %}
  {% set brightness = (params.BRIGHTNESS | default(0) | float) / 100 %}

  SET_GCODE_VARIABLE MACRO=SET_LED_BAR_PROGRESS VARIABLE=brightness VALUE={brightness}
  SET_GCODE_VARIABLE MACRO=RESET_PROGRESS VARIABLE=brightness VALUE={brightness}

  {% if printer.idle_timeout.state != "Printing" %}
    SET_LED LED={led} RED={led_bar_settings.initial_red * brightness} GREEN={led_bar_settings.initial_green * brightness} BLUE={led_bar_settings.initial_blue * brightness}
  {% else %}
    SET_LED_BAR_PROGRESS LED={led} PROGRESS={progress}
  {% endif %}

[gcode_macro SET_FAN_SPEED]
description: Set and limit fan speed to cfg value. These limits will be applyed for M106 command.
gcode:
  # Parameters
  #   [SPEED=<speed>] Fan speed. Will be recalculated if multiplier or limits are defined.
  #   [FIXED=<speed>] Fix fan speed to the defined value.
  #       This value has top priority. No Min, Max and Multiplication will be applyed.
  #       Set -1 to disable.
  #   [MIN=<speed>] Set minimal fan speed.
  #   [MAX=<speed>] Set maximal fan speed.
  #   [MUL=<multiplier>] Set fans speed multiplier. 
  #       Value smaller than 1.0 will decrease speed, value larger than 1.0 will increase speed.
  #       Min and Max limits will be applyed after multiplication.

  {% if 'FIXED' in params %}
    {% set fixspeed = params.FIXED|int %}
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=fixspeed VALUE={fixspeed}
  {% endif %}

  {% if 'MIN' in params %}
    {% set minspeed = params.MIN|int %}
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=minspeed VALUE={minspeed}
  {% endif %}

  {% if 'MAX' in params %}
    {% set maxspeed = params.MAX|int %}
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=maxspeed VALUE={maxspeed}
  {% endif %}

  {% if 'MUL' in params %}
    {% set multiplier = params.MUL|float %}
    SET_GCODE_VARIABLE MACRO=M106 VARIABLE=multiplier VALUE={multiplier}
  {% endif %}

  {% if 'SPEED' in params %}
    M106 S{params.SPEED}
  {% else %}
    M106
  {% endif %}

[gcode_macro RESET_FAN_SPEED]
description: Reset fan speed limits and multiplication.
gcode:
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=minspeed VALUE=0
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=maxspeed VALUE=255
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=fixspeed VALUE=-1
  SET_GCODE_VARIABLE MACRO=M106 VARIABLE=multiplier VALUE=1.0
  M106

[gcode_macro M106]
# Authors: @icoderus, @stas2z, @uladzimirpalekh
description: Set fan speed. Calling without parameters will apply current limits to the last requeted speed.
variable_minspeed: 0
variable_maxspeed: 255
variable_fixspeed: -1
variable_currentspeed: 0
variable_multiplier: 1.0
rename_existing: M106.1
gcode:
  {% if fixspeed >= 0 %}
    M106.1 S{fixspeed}
  {% else %}
    {% if 'S' in params %}
      {% set speed = params.S|default(0)|int %}
      SET_GCODE_VARIABLE MACRO=M106 VARIABLE=currentspeed VALUE={speed}
    {% else %}
      {% set speed = currentspeed %}
    {% endif %}

    {% set speed = (speed*multiplier)|int %}
    {% if speed > 0 %}
      {% if speed < minspeed %}
        M106.1 S{minspeed}
      {% else %}
        {% if speed > maxspeed %}
          M106.1 S{maxspeed}
        {% else %}
          M106.1 S{speed}
        {% endif %}
      {% endif %}
    {% else %}
      M106.1 S0
    {% endif %}
  {% endif %}

[gcode_macro M107]
description: Switch fans off and reset M106
rename_existing: M107.1
gcode:
  M106 RESET
  M107.1

# Park toolhead
[gcode_macro M125]
gcode:
  {% set X = params.X | default(100) | float %}
  {% set Y = params.Y | default(0)   | float %}
  {% set Z = params.Z | default(20)  | float %}


  M117 Parking toolhead
  {% if printer.toolhead.position.z < 200 %}
    G91
    G1 Z{Z} F600 ; move up 20 mm
  {% endif %}
  G90
  G1 X{X} Y{Y} F4000 # move to park position

# Beep
[gcode_macro M300]
gcode:
  {% set S = params.S | default(900) | int %}
  {% set P = params.P | default(100) | int %}

  SET_PIN PIN=beeper VALUE={S}
  G4 P{P}
  SET_PIN PIN=beeper VALUE=0

# Filament change
[gcode_macro M600]
gcode:
  FILAMENT_CHANGE

# Load filament
[gcode_macro M701]
gcode:
  FILAMENT_LOAD

# Unload filament
[gcode_macro M702]
gcode:
  FILAMENT_UNLOAD

[gcode_macro FILAMENT_CHANGE]
gcode:
  M117 Filament Change
  M118 Filament Change
  SAVE_GCODE_STATE NAME=filament_change
  PAUSE
  ANNOYING_BEEPS
  FILAMENT_UNLOAD        ; unload
  M117 Run RESUME_FILAMENT_CHANGE

[gcode_macro RESUME_FILAMENT_CHANGE]
gcode:
  M117 New filament
  M118 New filament
  M701
  COUNTDOWN TIME=1 MSG="Clean"
  RESUME
  M117 Resuming
  M118 Resuming
  RESTORE_GCODE_STATE NAME=filament_change MOVE=1
  M117 Printing..
  M118 Printing..

[gcode_macro FILAMENT_LOAD]
gcode:
  SAVE_GCODE_STATE NAME=loading_filament
  M117 Loading Filament
  M83
  G92 E0.0
  LOW_TEMP_CHECK T=210
  G1 E100 F1000  ; length of bowden tube till cold-end (~100mm)
  G1 E40 F100    ; some extra to prime the nozzle --> slower
  G92 E0.0
  RESTORE_GCODE_STATE NAME=loading_filament

[gcode_macro FILAMENT_UNLOAD]
gcode:
  SAVE_GCODE_STATE NAME=unloading_filament
  M117 Unloading Filament
  LOW_TEMP_CHECK T=150
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=0
  G91 ; set relative
  G1 E5 F100
  G92 E0.0
  G1 E-160 F2000 ; the E is the length of the bowden tube.
  G92 E0.0
  SET_FILAMENT_SENSOR SENSOR=filament_sensor ENABLE=1
  RESTORE_GCODE_STATE NAME=unloading_filament

[gcode_macro PAUSE]
rename_existing: BASE_PAUSE
gcode:
  {% set X = params.X | default(100) | float %}
  {% set Y = params.Y | default(0)   | float %}
  {% set Z = params.Z | default(20)  | float %}
  {% set E = params.E | default(1)   | float %}

  SAVE_GCODE_STATE NAME=PAUSE_state
  BASE_PAUSE
  LOW_TEMP_CHECK
  G91                  ; relative
  G1 E-{E} F300        ; retract
  M125 X{X} Y{Y} Z{Z}  ; park

[gcode_macro RESUME]
rename_existing: BASE_RESUME
gcode:
  {% set E = params.E | default(1) | float %}

  G91
  G1 E{E} F2100
  G90
  RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
  BASE_RESUME

[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
gcode:
  RESPOND PREFIX=timelapse MSG=stop
  G91
  G1 E-20 F300.0
  TURN_OFF_HEATERS
  CLEAR_PAUSE
  SDCARD_RESET_FILE
  RESET_PROGRESS
  HOME_DOWN
  BASE_CANCEL_PRINT
  M107
  RESPOND PREFIX=timelapse MSG=create

[gcode_macro START_PRINT]
gcode:
  {% set T_BED = params.T_BED | default(60) | float %}
  {% set T_EXTRUDER = params.T_EXTRUDER | default(190) | float %}
  {% set TOTAL_LAYERS = params.TOTAL_LAYERS | default(1) | int %}

  SET_PRINT_STATS_INFO TOTAL_LAYER={TOTAL_LAYERS}

  M117 Homing
  #metric values
  G21
  # Use absolute coordinates
  G90
  # Home the printer
  G28 X0 Y0 Z0
  # Move the nozzle near the bed
  G1 X15 Y20 Z5 F6000

  M117 Waiting for temperature

  #Preheat for bed probing
  M104 S155

  # Start bed heating and continue
  M140 S{T_BED}
  {% if printer.heater_bed.temperature < T_BED*0.85 %}
    M190 S{T_BED*0.85} ; wait till 0.85 of bed temp is reached, then continue
  {% endif %}

  M140 S{T_BED}
  M190 S{T_BED}

  M117 Calibrating...
  Z_TILT_ADJUST
  BED_MESH_CALIBRATE PRINT_MIN={params.PRINT_MIN} PRINT_MAX={params.PRINT_MAX}

  M109 S{T_EXTRUDER}

  # Prime line
  PRIME_LINE PRINT_MIN={params.PRINT_MIN}

  G21 ; set units to millimeters
  G90 ; use absolute coordinates
  M83 ; use relative distances for extrusion

  RESPOND PREFIX=timelapse MSG=start

  M117 Printing...

[gcode_macro END_PRINT]
gcode:
  M117 Printing finished
  RESPOND PREFIX=timelapse MSG=photo
  RESPOND PREFIX=timelapse MSG=stop

  G91
  # Move Z axis up
  G1 E-5 F300.0                ; Retract the filament a bit before lifting the nozzle, to release some of the pressure

  {% set X_MOVE = 20 if printer.toolhead.position.x > 20 else printer.toolhead.position.x %}
  {% set Y_MOVE = 20 if printer.toolhead.position.y > 20 else printer.toolhead.position.y %}
  {% set Z_MAX_LEFT = printer.toolhead.axis_maximum.z - printer.toolhead.position.z %}
  {% set Z_MOVE = 1.0 if Z_MAX_LEFT > 1.0 else Z_MAX_LEFT %}

  G1 Z+{Z_MOVE} E-15 X-{X_MOVE} Y-{Y_MOVE} F9000 ; Move Z up a bit and retract filament even more
  G90 # Absolute X/Y
  HOME_DOWN                    ; Move X/Y to min endstops, so the head is out of the way
  TURN_OFF_HEATERS
  RESET_PROGRESS
  # Disable steppers
  M84
  RESPOND PREFIX=timelapse MSG=create

[gcode_macro PRIME_LINE]
gcode:
  M117 Prime Line
  # Reset Extruder
  G92 E0
  # Move Z axis up
  G1 Z2.0 F3000

  {% set baseX = 0 %}
  {% if params.PRINT_MIN %}
    {% set printMinX = params.PRINT_MIN.split(",")[0]|float %}
    {% if printMinX >= 5 %}
      {% set baseX = printMinX - 5 %}
    {% endif %}
  {% endif %}

  # Draw prime line
  G1 X{baseX} Y30 Z0.28 F5000.0        ; Move to start position
  G1 X{baseX} Y180.0 Z0.28 F1500.0 E20 ; Draw the first line
  G1 X{baseX + 2} Y180.0 Z0.28 F5000.0     ; Move to side a little
  G1 X{baseX + 2} Y50 Z0.28 F1500.0 E40    ; Draw the second line
  # Reset Extruder
  G92 E0
  # Move Z axis up
  G1 Z2.0 F3000

# LOW_TEMP_CHECK checks if there is a setpoint for the extruder.
# - If this setpoint is reached, continue.
# - If not, heat to setpoint.
# - If no setpoint, heat to parameter T (default@230)
[gcode_macro LOW_TEMP_CHECK]
gcode:
  {% set T = params.T | default(230) | float %}

  {% if printer.extruder.target != 0 %}
    # if there is a setpoint for extruder
    {% if printer.extruder.temperature < printer.extruder.target %}
      # if not reached, heat
      M118 Heating from {printer.extruder.temperature} to {printer.extruder.target}.
      M109 S{printer.extruder.target | float}
    {% endif %}
  {% else %}
    # if no setpoint for extruder
    {% if printer.extruder.temperature < T %}
      # heat to T.
      M118 No setpoint, heating to {T}.
      M109 S{T}
    {% endif %}
  {% endif %}

[gcode_macro COUNTDOWN]
gcode:
  {% set MSG = params.MSG   | default("Time: ") %}
  {% set TIME = params.TIME | default(10) | int %}

  # countdown
  {% for s in range(TIME, 0, -1) %}
    # dwell 1 second
    G4 P1000
    # echo
    M117 {MSG} {s}s
    M118 {MSG} {s}s
  {% endfor %}

[gcode_macro ANNOYING_BEEPS]
gcode:
  {% set N = params.N | default(5) | int %}
  {% for i in range(N, 0, -1) %}
    M300 P500
    {% if i != 0 %}
      G4 P500
    {% endif %}
  {% endfor %}

[gcode_macro HOME_DOWN]
gcode:
  {% set Z_MAX_LEFT = printer.toolhead.axis_maximum.z - printer.toolhead.position.z %}
  {% set Z_POSITION = (printer.toolhead.axis_maximum.z - 1) if Z_MAX_LEFT > 1.0 else printer.toolhead.position.z %}

  G90
  G1 Z{Z_POSITION} F3600
  G1 X0 Y0 F7800

[gcode_macro _USE_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set sqv = svv.infill_sqv | default(printer.configfile.settings.printer.square_corner_velocity, true) %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro _USE_NORMAL_SQV]
gcode:
    {% set sqv = printer.configfile.settings.printer.square_corner_velocity %}
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ sqv }

[gcode_macro SET_INFILL_SQV]
gcode:
    {% set svv = printer.save_variables.variables %}
    {% set val = params.SQV|default(svv.infill_sqv|default(printer.configfile.settings.printer.square_corner_velocity, true), true) | int %}
    SAVE_VARIABLE VARIABLE=infill_sqv VALUE={val}

[gcode_macro BED_MESH_CALIBRATE]
# print surface bed mesh calibrate
# Works with Klicky Probe on Voron
# November 24, 2021
# Steve Turgeon
# Junuary 31, 2022
# Uladzimir Palekh
rename_existing: _BED_MESH_CALIBRATE

variable_buffer: 20

; Do not change any of the existing values below.
variable_last_area_start_x: -1 ; Do not change
variable_last_area_start_y: -1 ; Do not change
variable_last_area_end_x: -1 ; Do not change
variable_last_area_end_y: -1 ; Do not change

gcode:
  {% if params.FORCE_NEW_MESH != null %}
    { action_respond_info("Force New Mesh: %s" % (params.FORCE_NEW_MESH)) }
  {% endif %}
  {% if printer["bed_mesh"].profile_name == '' %}
    { action_respond_info("No existing bed mesh found.") }
    {% set last_area_end_x=-1 %}
  {% endif %}

  {% if printer.toolhead.homed_axes != "xyz" %}
    G28
  {% endif %}

  {% set klicky_available = printer['gcode_macro _Probe_Variables'] != null %}
  {% if params.PRINT_MIN %}
    { action_respond_info("print_min: %s" % params.PRINT_MIN) }
    { action_respond_info("print_max: %s" % params.PRINT_MAX) }

    {% set blTouchConfig = printer['configfile'].config["bltouch"] %}
    {% if blTouchConfig %}
      {% set OffsetX = blTouchConfig.x_offset|default(0)|float %}
      {% set OffsetY = blTouchConfig.y_offset|default(0)|float %}
    {% endif %}

    {% set probeConfig = printer['configfile'].config["probe"] %}
    {% if probeConfig %}
      {% set OffsetX = probeConfig.x_offset|default(0)|float %}
      {% set OffsetY = probeConfig.y_offset|default(0)|float %}
    {% endif %}

    {% set print_min_x = params.PRINT_MIN.split(",")[0]|float %}
    {% set print_min_y = params.PRINT_MIN.split(",")[1]|float %}
    {% set print_max_x = params.PRINT_MAX.split(",")[0]|float %}
    {% set print_max_y = params.PRINT_MAX.split(",")[1]|float %}

    {% if last_area_start_x > 0 %}
      { action_respond_info("last_bed_mesh: %s,%s %s,%s" % (last_area_start_x, last_area_start_y, last_area_end_x, last_area_end_y)) }
    {% endif %}

    {% if (params.FORCE_NEW_MESH != null) or (print_min_x < last_area_start_x) or (print_max_x > last_area_end_x) or (print_min_y < last_area_start_y) or (print_max_y > last_area_end_y)  %}
      {% if klicky_available %}
        _CheckProbe action=query
        Attach_Probe
      {% endif %}
      {% if (print_min_x < print_max_x) and (print_min_y < print_max_y) %}

        # Get bed_mesh config (probe count, mesh_min and mesh_max for x and y
        {% set bedMeshConfig = printer['configfile'].config["bed_mesh"] %}
        {% set minimum_probe_count = 3 %}
        {% if bedMeshConfig.algorithm == "bicubic" %}
          {% set minimum_probe_count = 5 %}
        {% endif %}
        {% set probe_count = bedMeshConfig.probe_count.split(",") %}
        {% set probe_count_x = probe_count[0]|int %}
        {% if probe_count.__len__() > 1 %}
          {% set probe_count_y = probe_count[1]|int %}
        {% else %}
          {% set probe_count_y = probe_count_x|int %}
        {% endif %}
        {% set relative_reference_index = bedMeshConfig.relative_reference_index %}
        {% set mesh_min_x = bedMeshConfig.mesh_min.split(",")[0]|float %}
        {% set mesh_min_y = bedMeshConfig.mesh_min.split(",")[1]|float %}
        {% set mesh_max_x = bedMeshConfig.mesh_max.split(",")[0]|float %}
        {% set mesh_max_y = bedMeshConfig.mesh_max.split(",")[1]|float %}
        {% set probe_distance_x = (mesh_max_x - mesh_min_x) / (probe_count_x - 1) %}
        {% set probe_distance_y = (mesh_max_y - mesh_min_y) / (probe_count_y - 1) %}

        {% if print_min_x - buffer >= mesh_min_x %}
          {% set mesh_min_x = print_min_x - buffer %}
        {% endif %}

        {% if print_min_y - buffer >= mesh_min_y %}
          {% set mesh_min_y = print_min_y - buffer %}
        {% endif %}

        {% if print_max_x + buffer <= mesh_max_x %}
          {% set mesh_max_x = print_max_x + buffer %}
        {% endif %}

        {% if print_max_y + buffer <= mesh_max_y %}
          {% set mesh_max_y = print_max_y + buffer %}
        {% endif %}

        {% set probe_count_x = ((mesh_max_x - mesh_min_x) / probe_distance_x)|round(0, 'ceil')|int %}
        {% set probe_count_y = ((mesh_max_y - mesh_min_y) / probe_distance_y)|round(0, 'ceil')|int %}

        {% if probe_count_x < minimum_probe_count %}
          {% set probe_count_x = minimum_probe_count %}
        {% endif %}

        {% if probe_count_y < minimum_probe_count %}
          {% set probe_count_y = minimum_probe_count %}
        {% endif %}

        { action_respond_info("mesh_min: %s,%s" % (mesh_min_x, mesh_min_y)) }
        { action_respond_info("mesh_max: %s,%s" % (mesh_max_x, mesh_max_y)) }
        { action_respond_info("probe_count: %s,%s" % (probe_count_x,probe_count_y)) }

        ; Set variables so they're available outside of macro
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_x VALUE={print_min_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_start_y VALUE={print_min_y}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_x VALUE={print_max_x}
        SET_GCODE_VARIABLE MACRO=BED_MESH_CALIBRATE VARIABLE=last_area_end_y VALUE={print_max_y}

        {% if printer["gcode_macro status_meshing"] != null %}
          status_meshing
        {% endif %}

        {% if relative_reference_index == 0 or relative_reference_index == null %}
          _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y}
        {% else %}
          {% set relative_reference_index = ((probe_count_x * probe_count_y - 1) / 2)|int %}
          { action_respond_info("relative_reference_index: %s" % relative_reference_index) }
          _BED_MESH_CALIBRATE mesh_min={mesh_min_x},{mesh_min_y} mesh_max={mesh_max_x},{mesh_max_y} probe_count={probe_count_x},{probe_count_y} relative_reference_index={relative_reference_index}
        {% endif %}
      {% else %}
        {% if printer["gcode_macro status_meshing"] != null %}
          status_meshing
        {% endif %}
        _BED_MESH_CALIBRATE
      {% endif %}
      {% if klicky_available %}
        Dock_Probe
      {% endif %}
    {% else %}
      { action_respond_info("No need to recreate Bed Mesh since it's same as current mesh or smaller") }
    {% endif %}
  {% else %}
    {% if klicky_available %}
      _CheckProbe action=query
      Attach_Probe
    {% endif %}
    {% if printer["gcode_macro status_meshing"] != null %}
      status_meshing
    {% endif %}
    _BED_MESH_CALIBRATE
    {% if klicky_available %}
      Dock_Probe
    {% endif %}
  {% endif %}
  {% if printer["gcode_macro status_ready"] != null %}
    status_ready
  {% endif %}

[gcode_macro M486]
gcode:
  # Parameters known to M486 are as follows:
  #   [C<flag>] Cancel the current object
  #   [P<index>] Cancel the object with the given index
  #   [S<index>] Set the index of the current object.
  #       If the object with the given index has been canceled, this will cause
  #       the firmware to skip to the next object. The value -1 is used to
  #       indicate something that isn’t an object and shouldn’t be skipped.
  #   [T<count>] Reset the state and set the number of objects
  #   [U<index>] Un-cancel the object with the given index. This command will be
  #       ignored if the object has already been skipped

  {% if 'exclude_object' not in printer %}
    {action_raise_error("[exclude_object] is not enabled")}
  {% endif %}

  {% if 'T' in params %}
    EXCLUDE_OBJECT RESET=1

    {% for i in range(params.T | int) %}
      EXCLUDE_OBJECT_DEFINE NAME={i}
    {% endfor %}
  {% endif %}

  {% if 'C' in params %}
    EXCLUDE_OBJECT CURRENT=1
  {% endif %}

  {% if 'P' in params %}
    EXCLUDE_OBJECT NAME={params.P}
  {% endif %}

  {% if 'S' in params %}
    {% if params.S == '-1' %}
      {% if printer.exclude_object.current_object %}
        EXCLUDE_OBJECT_END NAME={printer.exclude_object.current_object}
      {% endif %}
    {% else %}
      EXCLUDE_OBJECT_START NAME={params.S}
    {% endif %}
  {% endif %}

  {% if 'U' in params %}
    EXCLUDE_OBJECT RESET=1 NAME={params.U}
  {% endif %}

[gcode_macro MAKE_PHOTO]
gcode:
  RESPOND PREFIX=timelapse MSG=photo

[gcode_macro CREATE_TIMELAPSE]
gcode:
  RESPOND PREFIX=timelapse MSG=create

[gcode_macro _bot_data]
variable_lapse_video_size: 0
variable_lapse_filename: 'None'
variable_lapse_path: 'None'
gcode:
    M118 Setting bot lapse variables

[gcode_macro BEFORE_LAYER_CHANGE]
gcode:
  RESPOND PREFIX=timelapse MSG=photo

[gcode_macro AFTER_LAYER_CHANGE]
gcode:
  {% set layer = params.LAYER | default(0) | int %}
  {% set total_layers = params.TOTAL_LAYERS | default(0) | int %}
  {% set z = params.Z | default(0) | float %}

  SET_PRINT_STATS_INFO CURRENT_LAYER={layer}
  M117 L{layer}/{total_layers} Z{z}